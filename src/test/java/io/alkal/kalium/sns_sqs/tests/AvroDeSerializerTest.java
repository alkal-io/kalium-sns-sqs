package io.alkal.kalium.sns_sqs.tests;/*
 * This Java source file was generated by the Gradle 'init' task.
 */


import io.alkal.kalium.sns_sqs.serdes.AvroDeSerializer;
import io.alkal.kalium.sns_sqs.serdes.SerializationException;
import io.alkal.kalium.sns_sqs.tests.models.avro.PaymentAV;
import org.junit.Test;

import java.io.IOException;
import java.util.Base64;
import java.util.HashMap;
import java.util.Map;

import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;


public class AvroDeSerializerTest {

    public static final String payment_id = "cdb0dfb9-396d-4269-bfa4-8408211b5e3d";
    public static String validSerializedPayment = null;

    static {
        try {
            validSerializedPayment = Base64.getEncoder().encodeToString(PaymentAV.newBuilder()
                    .setId(payment_id).setProcessed(false).build().toByteBuffer().array());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static final String validTopic = "payment";


    private AvroDeSerializer target = new AvroDeSerializer();

    @Test(expected = RuntimeException.class)
    public void testSetTopicToClassMap_shouldThrowAnException_whenPropsHasNoTopicToClassMapValue() throws InterruptedException {
        target.setTopicToClassMap(null);
    }


    @Test(expected = SerializationException.class)
    public void testDeserialize_whenTopicIsNull_shouldThrowSerializationException() {

        target.deserialize(null, validSerializedPayment);
    }

    @Test(expected = SerializationException.class)
    public void testDeserialize_whenTopicIsEmptyString_shouldThrowSerializationException() {
        target.deserialize("", validSerializedPayment);
    }

    @Test(expected = SerializationException.class)
    public void testDeserialize_whenTopicIsNotInTopicToClassMap_shouldThrowSerializationException() {
        Map<String, Class<?>> topicToClassMap = new HashMap<>();
        target.setTopicToClassMap(topicToClassMap);
        target.deserialize(validTopic, validSerializedPayment);
    }

    @Test(expected = SerializationException.class)
    public void testDeserialize_whenNoClassIsMappedInTopicToClassMap_shouldThrowSerializationException() {
        Map<String, Class<?>> topicToClassMap = new HashMap<>();
        topicToClassMap.put("payment", null);
        target.setTopicToClassMap(topicToClassMap);

        target.deserialize(validTopic, validSerializedPayment);
    }

    @Test
    public void testDeserialize_whenBytesNull_shouldReturnNullObject() {
        target.setTopicToClassMap(createValidTopicToClassMap());
        Object o = target.deserialize(validTopic, null);
        assertNull(o);
    }

    @Test
    public void testDeserialize_whenBytesIsEmpty_shouldReturnNullObject() {
        target.setTopicToClassMap(createValidTopicToClassMap());
        Object o = target.deserialize(validTopic, "");
        assertNull(o);
    }

    @Test
    public void testDeserialize_shouldReturnPaymentObject() {
        target.setTopicToClassMap(createValidTopicToClassMap());
        Object o = target.deserialize(validTopic, validSerializedPayment);
        assertTrue(o instanceof io.alkal.kalium.sns_sqs.tests.models.avro.PaymentAV);
    }

    private static Map<String, Class<?>> createValidTopicToClassMap() {
        Map<String, Class<?>> topicToClassMap = new HashMap<>();
        topicToClassMap.put("payment", io.alkal.kalium.sns_sqs.tests.models.avro.PaymentAV.class);
        return topicToClassMap;
    }


}
