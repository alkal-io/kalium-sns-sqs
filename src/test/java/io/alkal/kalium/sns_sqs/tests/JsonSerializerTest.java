package io.alkal.kalium.sns_sqs.tests;/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.alkal.kalium.sns_sqs.serdes.JsonSerializer;
import io.alkal.kalium.sns_sqs.serdes.SerializationException;
import io.alkal.kalium.sns_sqs.tests.models.pojo.Payment;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import java.util.Base64;

import static org.junit.Assert.*;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.mock;


public class JsonSerializerTest {

    public static final String payment_id = "cdb0dfb9-396d-4269-bfa4-8408211b5e3d";
    public static final String validSerializedPayment = Base64.getEncoder()
            .encodeToString(new String("{\"processed\":false,\"id\":\"" + payment_id + "\"}").getBytes());
    public static final Payment payment = new Payment(payment_id);


    private JsonSerializer target;

    private ObjectMapper objectMapper;

    @Before
    public void setup() {
        objectMapper = mock(ObjectMapper.class);
        target = new JsonSerializer(objectMapper);
    }


    @Test(expected = SerializationException.class)
    public void testSerialize_whenObjectMapperThrowsException_shouldThrowSerializationException() throws Exception {
        Mockito.when(objectMapper.writeValueAsBytes(eq(payment))).thenThrow(new JsonMappingException(""));
        target.serialize(payment);
    }

    @Test
    public void testSerialize_whenObjectNull_shouldReturnNullObject() {
        Object o = target.serialize(null);
        assertNull(o);
    }


    @Test
    public void testSerializePayment_shouldReturnCorrectBytes() {
        //re-instanstiate the serializer with a real object mapper
        target = new JsonSerializer();
        String base64 = target.serialize(payment);
        assertTrue("base64 String is empty", base64 != null && base64.length() > 0);
        assertEquals(validSerializedPayment, target.serialize(payment));
    }
}
